import json
from openai import OpenAI
from ai.config import GptModels
from typing import Dict, Any

from ai.config import GptModels, client

from ai.system_content import (
    multiple_choice,
    checkbox,
    likert_scale,
    open_ended,
    analysed_data,
)

model = GptModels.OPENAI_MODEL


def surveyQuestions(SYSTEM_PROMPT: str, survey_data: Dict[Any, Any]) -> Dict[str, str]:
    print(f"DEBUG: Received survey_data in AI service: {survey_data}")
    print(
        f"DEBUG: Question count from trainer to be generated by AI service: {survey_data.get('questionCount')}"
    )

    section = "surveyQuestions"
    try:
        surveyQuestions = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": SYSTEM_PROMPT,
                },
                {
                    "role": "user",
                    "content": f"""
                            Generate a structured survey, with a focus on assessing baseline knowledge and specific learning needs. Adhere to these guidelines:
                            1. Output the survey in JSON format strictly.
                            2. Use formal British English for clarity and professionalism.
                            3. Create a set of {survey_data["questionCount"]} questions, incorporating a range of types (multiple-choice, checkbox, Likert scale, open-ended).

                            Use this structure guide:

                            1. Multiple Choice:
                                {multiple_choice}

                            2. Checkbox (Select All That Apply):
                                {checkbox}

                            3. Likert Scale (1–5):
                                {likert_scale}

                            4. Open-Ended (Short Answer):
                                {open_ended}

                """,
                },
            ],
            response_format={"type": "json_object"},
            max_tokens=16384,
            temperature=0.5,
            presence_penalty=0.6,
            top_p=0.8,
            n=1,
        )

        surveyQuestionsResult = surveyQuestions.choices[0].message.content.strip()
        if not surveyQuestionsResult:
            raise print("Chat Completion output in {section} is empty, retrying...")

        print(f"{section} : OK")
        return surveyQuestionsResult

    except openai.AuthenticationError as e:
        print(f"Invalid or expired API key: {e}")
        raise
    except openai.BadRequestError as e:
        print(f"Malformed request in {section}: {e}")
        raise
    except openai.APIError as e:
        print(f"OpenAI API returned an error in {section}: {e}")
        raise
    except openai.APIConnectionError as e:
        print(f"Connection error in {section}: {e}")
        raise
    except openai.RateLimitError as e:
        print(f"Rate limit exceeded in {section}: {e}")
        raise


def analysis_Trainee_Response(SYSTEM_PROMPT: str, survey_responses: str):
    print(f"DEBUG: Received survey_response for summarization: {survey_responses}")

    section = "Analysed summarisation Trainer Questionnaire"
    try:
        analysisTQ = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": SYSTEM_PROMPT,
                },
                {
                    "role": "user",
                    "content": f"""
                Building on prior survey insights, continue by analyzing and summarizing responses in-depth, focusing on the following areas to refine training outcomes and improve future sessions:

                1. Detailed Survey Outcomes:
                   - Extended Analysis: Go beyond surface-level insights by highlighting nuanced trends, discrepancies, and recurring patterns in trainee feedback.
                   - Course Strengths and Gaps: Identify specific course elements that were most effective or posed challenges. Provide actionable data points where possible.

                2. Iterative Modifications to Learning Objectives:
                   - Based on trends and outcomes, suggest targeted adjustments to course learning objectives, specifying the competencies that would benefit most.
                   - Future-Oriented Recommendations: Identify additional elements or skills to incorporate into future training programs based on unmet trainee needs or evolving industry standards.
                   - Include clear examples for each suggestion, such as “Introduce interactive group tasks on X” or “Provide supplementary material for advanced learners on topic Y.”

                3. Long-Term Curriculum Improvements:
                   - Summarize opportunities for improving the curriculum based on the aggregated feedback from this and previous analyses.
                   - Consistency and Scalability Recommendations: Highlight areas that can streamline content customization across multiple training cohorts, ensuring consistent quality and ease of adjustment.
                   - Focus on scalable solutions that support efficient course customization without constant re-evaluation by senior trainers.

                Data for analysis: {survey_responses}

                Expected JSON Output Format: {analysed_data}

                IMPORTANT:
                - Maintain output in JSON format as specified.
                - Ensure insights are practical and support actionable curriculum adjustments.
                """,
                },
            ],
            response_format={"type": "json_object"},
            max_tokens=16384,
            temperature=0.5,
            presence_penalty=0.6,
            top_p=0.8,
            n=1,
        )

        TQ_analysis = analysisTQ.choices[0].message.content.strip()
        if not TQ_analysis:
            raise print("Chat Completion output in {section} is empty, retrying...")

        print(f"{section} : OK")
        return TQ_analysis

    except openai.AuthenticationError as e:
        print(f"Invalid or expired API key: {e}")
        raise
    except openai.BadRequestError as e:
        print(f"Malformed request in {section}: {e}")
        raise
    except openai.APIError as e:
        print(f"OpenAI API error in {section}: {e}")
        raise
    except openai.APIConnectionError as e:
        print(f"Connection error in {section}: {e}")
        raise
    except openai.RateLimitError as e:
        print(f"Rate limit exceeded in {section}: {e}")
        raise
